{
  
    
        "post0": {
            "title": "Title",
            "content": "import numpy as np import pandas as pd import matplotlib.pyplot as plt import seaborn as sns from scipy import stats . dfcodon = pd.read_csv(&#39;../data/codon_usage.csv&#39;) . /home/amina/anaconda3/lib/python3.7/site-packages/IPython/core/interactiveshell.py:3063: DtypeWarning: Columns (5,6) have mixed types.Specify dtype option on import or set low_memory=False. interactivity=interactivity, compiler=compiler, result=result) . dfcodon.head(10) . Kingdom DNAtype SpeciesID Ncodons SpeciesName UUU UUC UUA UUG CUU ... CGG AGA AGG GAU GAC GAA GAG UAA UAG UGA . 0 vrl | 0 | 100217 | 1995 | Epizootic haematopoietic necrosis virus | 0.01654 | 0.01203 | 0.00050 | 0.00351 | 0.01203 | ... | 0.00451 | 0.01303 | 0.03559 | 0.01003 | 0.04612 | 0.01203 | 0.04361 | 0.00251 | 0.00050 | 0.00000 | . 1 vrl | 0 | 100220 | 1474 | Bohle iridovirus | 0.02714 | 0.01357 | 0.00068 | 0.00678 | 0.00407 | ... | 0.00136 | 0.01696 | 0.03596 | 0.01221 | 0.04545 | 0.01560 | 0.04410 | 0.00271 | 0.00068 | 0.00000 | . 2 vrl | 0 | 100755 | 4862 | Sweet potato leaf curl virus | 0.01974 | 0.0218 | 0.01357 | 0.01543 | 0.00782 | ... | 0.00596 | 0.01974 | 0.02489 | 0.03126 | 0.02036 | 0.02242 | 0.02468 | 0.00391 | 0.00000 | 0.00144 | . 3 vrl | 0 | 100880 | 1915 | Northern cereal mosaic virus | 0.01775 | 0.02245 | 0.01619 | 0.00992 | 0.01567 | ... | 0.00366 | 0.01410 | 0.01671 | 0.03760 | 0.01932 | 0.03029 | 0.03446 | 0.00261 | 0.00157 | 0.00000 | . 4 vrl | 0 | 100887 | 22831 | Soil-borne cereal mosaic virus | 0.02816 | 0.01371 | 0.00767 | 0.03679 | 0.01380 | ... | 0.00604 | 0.01494 | 0.01734 | 0.04148 | 0.02483 | 0.03359 | 0.03679 | 0.00000 | 0.00044 | 0.00131 | . 5 vrl | 0 | 101029 | 5274 | Human adenovirus type 7d | 0.02579 | 0.02218 | 0.01479 | 0.01024 | 0.02294 | ... | 0.00303 | 0.01593 | 0.00171 | 0.02427 | 0.02503 | 0.02825 | 0.01270 | 0.00133 | 0.00038 | 0.00209 | . 6 vrl | 0 | 101688 | 3042 | Apple latent spherical virus | 0.04635 | 0.01545 | 0.02005 | 0.02400 | 0.02761 | ... | 0.00329 | 0.01315 | 0.00822 | 0.04011 | 0.01183 | 0.02663 | 0.02663 | 0.00033 | 0.00033 | 0.00000 | . 7 vrl | 0 | 101764 | 2801 | Aconitum latent virus | 0.02285 | 0.02678 | 0.01214 | 0.02321 | 0.01714 | ... | 0.00678 | 0.01250 | 0.01107 | 0.03534 | 0.01571 | 0.03642 | 0.02785 | 0.00107 | 0.00036 | 0.00071 | . 8 vrl | 0 | 101947 | 2897 | Pseudorabies virus Ea | 0.01105 | 0.02106 | 0.00035 | 0.00104 | 0.00035 | ... | 0.02658 | 0.00207 | 0.00311 | 0.00414 | 0.04556 | 0.00449 | 0.04867 | 0.00138 | 0.00035 | 0.00138 | . 9 vrl | 0 | 10249 | 61247 | Vaccinia virus Copenhagen | 0.03411 | 0.0143 | 0.02771 | 0.01869 | 0.01148 | ... | 0.00167 | 0.02230 | 0.00411 | 0.04866 | 0.01559 | 0.03695 | 0.01412 | 0.00250 | 0.00077 | 0.00103 | . 10 rows × 69 columns . dfcodon.describe() . DNAtype SpeciesID Ncodons UUA UUG CUU CUC CUA CUG AUU ... CGG AGA AGG GAU GAC GAA GAG UAA UAG UGA . count 13028.000000 | 13028.000000 | 1.302800e+04 | 13028.000000 | 13028.000000 | 13028.000000 | 13028.000000 | 13028.000000 | 13028.000000 | 13028.000000 | ... | 13028.000000 | 13028.000000 | 13028.000000 | 13028.000000 | 13028.000000 | 13028.000000 | 13028.000000 | 13028.000000 | 13028.000000 | 13028.000000 | . mean 0.367209 | 130451.105926 | 7.960576e+04 | 0.020637 | 0.014104 | 0.017820 | 0.018288 | 0.019044 | 0.018450 | 0.028352 | ... | 0.005454 | 0.009929 | 0.006422 | 0.024178 | 0.021164 | 0.028290 | 0.021683 | 0.001645 | 0.000592 | 0.006178 | . std 0.688726 | 124787.086107 | 7.197010e+05 | 0.020709 | 0.009280 | 0.010586 | 0.014572 | 0.024250 | 0.016578 | 0.017507 | ... | 0.006605 | 0.008574 | 0.006387 | 0.013828 | 0.013041 | 0.014342 | 0.015018 | 0.001834 | 0.000907 | 0.010344 | . min 0.000000 | 7.000000 | 1.000000e+03 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | ... | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | . 25% 0.000000 | 28850.750000 | 1.602000e+03 | 0.005610 | 0.007107 | 0.010890 | 0.007830 | 0.005307 | 0.007180 | 0.016360 | ... | 0.001220 | 0.001690 | 0.001170 | 0.012380 | 0.011860 | 0.017360 | 0.009710 | 0.000560 | 0.000000 | 0.000410 | . 50% 0.000000 | 81971.500000 | 2.927500e+03 | 0.015260 | 0.013360 | 0.016130 | 0.014560 | 0.009685 | 0.012800 | 0.025475 | ... | 0.003530 | 0.009270 | 0.004545 | 0.025420 | 0.019070 | 0.026085 | 0.020540 | 0.001380 | 0.000420 | 0.001130 | . 75% 1.000000 | 222891.250000 | 9.120000e+03 | 0.029485 | 0.019810 | 0.022730 | 0.025113 | 0.017245 | 0.024315 | 0.038113 | ... | 0.007150 | 0.015922 | 0.010250 | 0.034190 | 0.027690 | 0.036800 | 0.031123 | 0.002370 | 0.000830 | 0.002890 | . max 12.000000 | 465364.000000 | 4.066258e+07 | 0.151330 | 0.101190 | 0.089780 | 0.100350 | 0.163920 | 0.107370 | 0.154060 | ... | 0.055540 | 0.098830 | 0.058430 | 0.185660 | 0.113840 | 0.144890 | 0.158550 | 0.045200 | 0.025610 | 0.106700 | . 8 rows × 65 columns . dfjustcodon = dfcodon.drop([&#39;Kingdom&#39;, &#39;DNAtype&#39;, &#39;SpeciesID&#39;, &#39;Ncodons&#39;, &#39;SpeciesName&#39;], axis=1).copy() #df.drop(&#39;column_name&#39;, axis=1, inplace=True) . dfjustcodon.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 13028 entries, 0 to 13027 Data columns (total 64 columns): # Column Non-Null Count Dtype -- -- 0 UUU 13028 non-null object 1 UUC 13028 non-null object 2 UUA 13028 non-null float64 3 UUG 13028 non-null float64 4 CUU 13028 non-null float64 5 CUC 13028 non-null float64 6 CUA 13028 non-null float64 7 CUG 13028 non-null float64 8 AUU 13028 non-null float64 9 AUC 13028 non-null float64 10 AUA 13028 non-null float64 11 AUG 13028 non-null float64 12 GUU 13028 non-null float64 13 GUC 13028 non-null float64 14 GUA 13028 non-null float64 15 GUG 13028 non-null float64 16 GCU 13028 non-null float64 17 GCC 13028 non-null float64 18 GCA 13028 non-null float64 19 GCG 13028 non-null float64 20 CCU 13028 non-null float64 21 CCC 13028 non-null float64 22 CCA 13028 non-null float64 23 CCG 13028 non-null float64 24 UGG 13028 non-null float64 25 GGU 13028 non-null float64 26 GGC 13028 non-null float64 27 GGA 13028 non-null float64 28 GGG 13028 non-null float64 29 UCU 13028 non-null float64 30 UCC 13028 non-null float64 31 UCA 13028 non-null float64 32 UCG 13028 non-null float64 33 AGU 13028 non-null float64 34 AGC 13028 non-null float64 35 ACU 13028 non-null float64 36 ACC 13028 non-null float64 37 ACA 13028 non-null float64 38 ACG 13028 non-null float64 39 UAU 13028 non-null float64 40 UAC 13028 non-null float64 41 CAA 13028 non-null float64 42 CAG 13028 non-null float64 43 AAU 13028 non-null float64 44 AAC 13028 non-null float64 45 UGU 13028 non-null float64 46 UGC 13028 non-null float64 47 CAU 13028 non-null float64 48 CAC 13028 non-null float64 49 AAA 13028 non-null float64 50 AAG 13028 non-null float64 51 CGU 13028 non-null float64 52 CGC 13028 non-null float64 53 CGA 13028 non-null float64 54 CGG 13028 non-null float64 55 AGA 13028 non-null float64 56 AGG 13028 non-null float64 57 GAU 13028 non-null float64 58 GAC 13028 non-null float64 59 GAA 13028 non-null float64 60 GAG 13028 non-null float64 61 UAA 13028 non-null float64 62 UAG 13028 non-null float64 63 UGA 13028 non-null float64 dtypes: float64(62), object(2) memory usage: 6.4+ MB . dfjustcodon.loc[485] . UUU 0.01643 UUC 0.02222 UUA 0.0132 UUG 0.00741 CUU 0.01932 ... GAA 0.02544 GAG 0.02061 UAA 0.00129 UAG 0 UGA 0.00129 Name: 485, Length: 64, dtype: object . hepb = dfjustcodon[dfjustcodon.eq(&quot;non-B hepatitis virus&quot;).any(1)] . /home/amina/anaconda3/lib/python3.7/site-packages/pandas/core/ops/array_ops.py:253: FutureWarning: elementwise comparison failed; returning scalar instead, but in the future will perform elementwise comparison res_values = method(rvalues) . hepb = dfjustcodon[dfjustcodon.eq(&quot;non-B hepatitis virus&quot;).any(1)] . dfjustcodon[&#39;UUU&#39;] = dfjustcodon[&#39;UUU&#39;].replace([&#39;non-B hepatitis virus&#39;], 0.01) . dfjustcodon[dfjustcodon.eq(&quot;non-B hepatitis virus&quot;).any(1)] . UUU UUC UUA UUG CUU CUC CUA CUG AUU AUC ... CGG AGA AGG GAU GAC GAA GAG UAA UAG UGA . 0 rows × 64 columns . dfjustcodon[dfjustcodon[&#39;UUC&#39;] == &#39;-&#39;] . UUU UUC UUA UUG CUU CUC CUA CUG AUU AUC ... CGG AGA AGG GAU GAC GAA GAG UAA UAG UGA . 5063 12;I | - | 0.0212 | 0.02356 | 0.01178 | 0.01296 | 0.0106 | 0.01296 | 0.00471 | 0.06949 | ... | 0.03062 | 0.00118 | 0.00707 | 0.00118 | 0.0 | 0.02945 | 0.02356 | 0.04476 | 0.02473 | 0.00118 | . 1 rows × 64 columns . dfjustcodon[dfjustcodon[&#39;UUC&#39;] == &#39;-&#39;] . UUU UUC UUA UUG CUU CUC CUA CUG AUU AUC ... CGG AGA AGG GAU GAC GAA GAG UAA UAG UGA . 5063 12;I | - | 0.0212 | 0.02356 | 0.01178 | 0.01296 | 0.0106 | 0.01296 | 0.00471 | 0.06949 | ... | 0.03062 | 0.00118 | 0.00707 | 0.00118 | 0.0 | 0.02945 | 0.02356 | 0.04476 | 0.02473 | 0.00118 | . 1 rows × 64 columns . # dfjustcodon[&#39;UUC&#39;] = dfjustcodon[&#39;UUC&#39;].astype(float) # dfjustcodon.info() #unable to change these because there are cells with values that aren&#39;t floats . dfjustcodon.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 13028 entries, 0 to 13027 Data columns (total 64 columns): # Column Non-Null Count Dtype -- -- 0 UUU 13028 non-null object 1 UUC 13028 non-null object 2 UUA 13028 non-null float64 3 UUG 13028 non-null float64 4 CUU 13028 non-null float64 5 CUC 13028 non-null float64 6 CUA 13028 non-null float64 7 CUG 13028 non-null float64 8 AUU 13028 non-null float64 9 AUC 13028 non-null float64 10 AUA 13028 non-null float64 11 AUG 13028 non-null float64 12 GUU 13028 non-null float64 13 GUC 13028 non-null float64 14 GUA 13028 non-null float64 15 GUG 13028 non-null float64 16 GCU 13028 non-null float64 17 GCC 13028 non-null float64 18 GCA 13028 non-null float64 19 GCG 13028 non-null float64 20 CCU 13028 non-null float64 21 CCC 13028 non-null float64 22 CCA 13028 non-null float64 23 CCG 13028 non-null float64 24 UGG 13028 non-null float64 25 GGU 13028 non-null float64 26 GGC 13028 non-null float64 27 GGA 13028 non-null float64 28 GGG 13028 non-null float64 29 UCU 13028 non-null float64 30 UCC 13028 non-null float64 31 UCA 13028 non-null float64 32 UCG 13028 non-null float64 33 AGU 13028 non-null float64 34 AGC 13028 non-null float64 35 ACU 13028 non-null float64 36 ACC 13028 non-null float64 37 ACA 13028 non-null float64 38 ACG 13028 non-null float64 39 UAU 13028 non-null float64 40 UAC 13028 non-null float64 41 CAA 13028 non-null float64 42 CAG 13028 non-null float64 43 AAU 13028 non-null float64 44 AAC 13028 non-null float64 45 UGU 13028 non-null float64 46 UGC 13028 non-null float64 47 CAU 13028 non-null float64 48 CAC 13028 non-null float64 49 AAA 13028 non-null float64 50 AAG 13028 non-null float64 51 CGU 13028 non-null float64 52 CGC 13028 non-null float64 53 CGA 13028 non-null float64 54 CGG 13028 non-null float64 55 AGA 13028 non-null float64 56 AGG 13028 non-null float64 57 GAU 13028 non-null float64 58 GAC 13028 non-null float64 59 GAA 13028 non-null float64 60 GAG 13028 non-null float64 61 UAA 13028 non-null float64 62 UAG 13028 non-null float64 63 UGA 13028 non-null float64 dtypes: float64(62), object(2) memory usage: 6.4+ MB . . . # try isinstance(i, float) . for i in col: if df[col].map(type) != float: print(i) . NameError Traceback (most recent call last) &lt;ipython-input-54-13d2a4b8bc49&gt; in &lt;module&gt; -&gt; 1 for i in col: 2 if df[col].map(type) != float: 3 print(i) NameError: name &#39;col&#39; is not defined .",
            "url": "https://pyjasmine.github.io/codon/2022/07/01/Capstone.html",
            "relUrl": "/2022/07/01/Capstone.html",
            "date": " • Jul 1, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "EDA",
            "content": "import numpy as np import pandas as pd import matplotlib.pyplot as plt import seaborn as sns from scipy import stats . dfcodon = pd.read_csv(&#39;../data/codon_usage.csv&#39;) . /home/amina/anaconda3/lib/python3.7/site-packages/IPython/core/interactiveshell.py:3063: DtypeWarning: Columns (5,6) have mixed types.Specify dtype option on import or set low_memory=False. interactivity=interactivity, compiler=compiler, result=result) . dfcodon.head(10) . Kingdom DNAtype SpeciesID Ncodons SpeciesName UUU UUC UUA UUG CUU ... CGG AGA AGG GAU GAC GAA GAG UAA UAG UGA . 0 vrl | 0 | 100217 | 1995 | Epizootic haematopoietic necrosis virus | 0.01654 | 0.01203 | 0.00050 | 0.00351 | 0.01203 | ... | 0.00451 | 0.01303 | 0.03559 | 0.01003 | 0.04612 | 0.01203 | 0.04361 | 0.00251 | 0.00050 | 0.00000 | . 1 vrl | 0 | 100220 | 1474 | Bohle iridovirus | 0.02714 | 0.01357 | 0.00068 | 0.00678 | 0.00407 | ... | 0.00136 | 0.01696 | 0.03596 | 0.01221 | 0.04545 | 0.01560 | 0.04410 | 0.00271 | 0.00068 | 0.00000 | . 2 vrl | 0 | 100755 | 4862 | Sweet potato leaf curl virus | 0.01974 | 0.0218 | 0.01357 | 0.01543 | 0.00782 | ... | 0.00596 | 0.01974 | 0.02489 | 0.03126 | 0.02036 | 0.02242 | 0.02468 | 0.00391 | 0.00000 | 0.00144 | . 3 vrl | 0 | 100880 | 1915 | Northern cereal mosaic virus | 0.01775 | 0.02245 | 0.01619 | 0.00992 | 0.01567 | ... | 0.00366 | 0.01410 | 0.01671 | 0.03760 | 0.01932 | 0.03029 | 0.03446 | 0.00261 | 0.00157 | 0.00000 | . 4 vrl | 0 | 100887 | 22831 | Soil-borne cereal mosaic virus | 0.02816 | 0.01371 | 0.00767 | 0.03679 | 0.01380 | ... | 0.00604 | 0.01494 | 0.01734 | 0.04148 | 0.02483 | 0.03359 | 0.03679 | 0.00000 | 0.00044 | 0.00131 | . 5 vrl | 0 | 101029 | 5274 | Human adenovirus type 7d | 0.02579 | 0.02218 | 0.01479 | 0.01024 | 0.02294 | ... | 0.00303 | 0.01593 | 0.00171 | 0.02427 | 0.02503 | 0.02825 | 0.01270 | 0.00133 | 0.00038 | 0.00209 | . 6 vrl | 0 | 101688 | 3042 | Apple latent spherical virus | 0.04635 | 0.01545 | 0.02005 | 0.02400 | 0.02761 | ... | 0.00329 | 0.01315 | 0.00822 | 0.04011 | 0.01183 | 0.02663 | 0.02663 | 0.00033 | 0.00033 | 0.00000 | . 7 vrl | 0 | 101764 | 2801 | Aconitum latent virus | 0.02285 | 0.02678 | 0.01214 | 0.02321 | 0.01714 | ... | 0.00678 | 0.01250 | 0.01107 | 0.03534 | 0.01571 | 0.03642 | 0.02785 | 0.00107 | 0.00036 | 0.00071 | . 8 vrl | 0 | 101947 | 2897 | Pseudorabies virus Ea | 0.01105 | 0.02106 | 0.00035 | 0.00104 | 0.00035 | ... | 0.02658 | 0.00207 | 0.00311 | 0.00414 | 0.04556 | 0.00449 | 0.04867 | 0.00138 | 0.00035 | 0.00138 | . 9 vrl | 0 | 10249 | 61247 | Vaccinia virus Copenhagen | 0.03411 | 0.0143 | 0.02771 | 0.01869 | 0.01148 | ... | 0.00167 | 0.02230 | 0.00411 | 0.04866 | 0.01559 | 0.03695 | 0.01412 | 0.00250 | 0.00077 | 0.00103 | . 10 rows × 69 columns . dfcodon.describe() . DNAtype SpeciesID Ncodons UUA UUG CUU CUC CUA CUG AUU ... CGG AGA AGG GAU GAC GAA GAG UAA UAG UGA . count 13028.000000 | 13028.000000 | 1.302800e+04 | 13028.000000 | 13028.000000 | 13028.000000 | 13028.000000 | 13028.000000 | 13028.000000 | 13028.000000 | ... | 13028.000000 | 13028.000000 | 13028.000000 | 13028.000000 | 13028.000000 | 13028.000000 | 13028.000000 | 13028.000000 | 13028.000000 | 13028.000000 | . mean 0.367209 | 130451.105926 | 7.960576e+04 | 0.020637 | 0.014104 | 0.017820 | 0.018288 | 0.019044 | 0.018450 | 0.028352 | ... | 0.005454 | 0.009929 | 0.006422 | 0.024178 | 0.021164 | 0.028290 | 0.021683 | 0.001645 | 0.000592 | 0.006178 | . std 0.688726 | 124787.086107 | 7.197010e+05 | 0.020709 | 0.009280 | 0.010586 | 0.014572 | 0.024250 | 0.016578 | 0.017507 | ... | 0.006605 | 0.008574 | 0.006387 | 0.013828 | 0.013041 | 0.014342 | 0.015018 | 0.001834 | 0.000907 | 0.010344 | . min 0.000000 | 7.000000 | 1.000000e+03 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | ... | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | . 25% 0.000000 | 28850.750000 | 1.602000e+03 | 0.005610 | 0.007107 | 0.010890 | 0.007830 | 0.005307 | 0.007180 | 0.016360 | ... | 0.001220 | 0.001690 | 0.001170 | 0.012380 | 0.011860 | 0.017360 | 0.009710 | 0.000560 | 0.000000 | 0.000410 | . 50% 0.000000 | 81971.500000 | 2.927500e+03 | 0.015260 | 0.013360 | 0.016130 | 0.014560 | 0.009685 | 0.012800 | 0.025475 | ... | 0.003530 | 0.009270 | 0.004545 | 0.025420 | 0.019070 | 0.026085 | 0.020540 | 0.001380 | 0.000420 | 0.001130 | . 75% 1.000000 | 222891.250000 | 9.120000e+03 | 0.029485 | 0.019810 | 0.022730 | 0.025113 | 0.017245 | 0.024315 | 0.038113 | ... | 0.007150 | 0.015922 | 0.010250 | 0.034190 | 0.027690 | 0.036800 | 0.031123 | 0.002370 | 0.000830 | 0.002890 | . max 12.000000 | 465364.000000 | 4.066258e+07 | 0.151330 | 0.101190 | 0.089780 | 0.100350 | 0.163920 | 0.107370 | 0.154060 | ... | 0.055540 | 0.098830 | 0.058430 | 0.185660 | 0.113840 | 0.144890 | 0.158550 | 0.045200 | 0.025610 | 0.106700 | . 8 rows × 65 columns . dfjustcodon = dfcodon.drop([&#39;Kingdom&#39;, &#39;DNAtype&#39;, &#39;SpeciesID&#39;, &#39;Ncodons&#39;, &#39;SpeciesName&#39;], axis=1).copy() #df.drop(&#39;column_name&#39;, axis=1, inplace=True) . dfjustcodon.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 13028 entries, 0 to 13027 Data columns (total 64 columns): # Column Non-Null Count Dtype -- -- 0 UUU 13028 non-null object 1 UUC 13028 non-null object 2 UUA 13028 non-null float64 3 UUG 13028 non-null float64 4 CUU 13028 non-null float64 5 CUC 13028 non-null float64 6 CUA 13028 non-null float64 7 CUG 13028 non-null float64 8 AUU 13028 non-null float64 9 AUC 13028 non-null float64 10 AUA 13028 non-null float64 11 AUG 13028 non-null float64 12 GUU 13028 non-null float64 13 GUC 13028 non-null float64 14 GUA 13028 non-null float64 15 GUG 13028 non-null float64 16 GCU 13028 non-null float64 17 GCC 13028 non-null float64 18 GCA 13028 non-null float64 19 GCG 13028 non-null float64 20 CCU 13028 non-null float64 21 CCC 13028 non-null float64 22 CCA 13028 non-null float64 23 CCG 13028 non-null float64 24 UGG 13028 non-null float64 25 GGU 13028 non-null float64 26 GGC 13028 non-null float64 27 GGA 13028 non-null float64 28 GGG 13028 non-null float64 29 UCU 13028 non-null float64 30 UCC 13028 non-null float64 31 UCA 13028 non-null float64 32 UCG 13028 non-null float64 33 AGU 13028 non-null float64 34 AGC 13028 non-null float64 35 ACU 13028 non-null float64 36 ACC 13028 non-null float64 37 ACA 13028 non-null float64 38 ACG 13028 non-null float64 39 UAU 13028 non-null float64 40 UAC 13028 non-null float64 41 CAA 13028 non-null float64 42 CAG 13028 non-null float64 43 AAU 13028 non-null float64 44 AAC 13028 non-null float64 45 UGU 13028 non-null float64 46 UGC 13028 non-null float64 47 CAU 13028 non-null float64 48 CAC 13028 non-null float64 49 AAA 13028 non-null float64 50 AAG 13028 non-null float64 51 CGU 13028 non-null float64 52 CGC 13028 non-null float64 53 CGA 13028 non-null float64 54 CGG 13028 non-null float64 55 AGA 13028 non-null float64 56 AGG 13028 non-null float64 57 GAU 13028 non-null float64 58 GAC 13028 non-null float64 59 GAA 13028 non-null float64 60 GAG 13028 non-null float64 61 UAA 13028 non-null float64 62 UAG 13028 non-null float64 63 UGA 13028 non-null float64 dtypes: float64(62), object(2) memory usage: 6.4+ MB . dfjustcodon.loc[485] . UUU 0.01643 UUC 0.02222 UUA 0.0132 UUG 0.00741 CUU 0.01932 ... GAA 0.02544 GAG 0.02061 UAA 0.00129 UAG 0 UGA 0.00129 Name: 485, Length: 64, dtype: object . hepb = dfjustcodon[dfjustcodon.eq(&quot;non-B hepatitis virus&quot;).any(1)] . /home/amina/anaconda3/lib/python3.7/site-packages/pandas/core/ops/array_ops.py:253: FutureWarning: elementwise comparison failed; returning scalar instead, but in the future will perform elementwise comparison res_values = method(rvalues) . hepb = dfjustcodon[dfjustcodon.eq(&quot;non-B hepatitis virus&quot;).any(1)] . dfjustcodon[&#39;UUU&#39;] = dfjustcodon[&#39;UUU&#39;].replace([&#39;non-B hepatitis virus&#39;], 0.01) . dfjustcodon[dfjustcodon.eq(&quot;non-B hepatitis virus&quot;).any(1)] . UUU UUC UUA UUG CUU CUC CUA CUG AUU AUC ... CGG AGA AGG GAU GAC GAA GAG UAA UAG UGA . 0 rows × 64 columns . dfjustcodon[dfjustcodon[&#39;UUC&#39;] == &#39;-&#39;] . UUU UUC UUA UUG CUU CUC CUA CUG AUU AUC ... CGG AGA AGG GAU GAC GAA GAG UAA UAG UGA . 5063 12;I | - | 0.0212 | 0.02356 | 0.01178 | 0.01296 | 0.0106 | 0.01296 | 0.00471 | 0.06949 | ... | 0.03062 | 0.00118 | 0.00707 | 0.00118 | 0.0 | 0.02945 | 0.02356 | 0.04476 | 0.02473 | 0.00118 | . 1 rows × 64 columns . dfjustcodon[dfjustcodon[&#39;UUC&#39;] == &#39;-&#39;] . UUU UUC UUA UUG CUU CUC CUA CUG AUU AUC ... CGG AGA AGG GAU GAC GAA GAG UAA UAG UGA . 5063 12;I | - | 0.0212 | 0.02356 | 0.01178 | 0.01296 | 0.0106 | 0.01296 | 0.00471 | 0.06949 | ... | 0.03062 | 0.00118 | 0.00707 | 0.00118 | 0.0 | 0.02945 | 0.02356 | 0.04476 | 0.02473 | 0.00118 | . 1 rows × 64 columns . # dfjustcodon[&#39;UUC&#39;] = dfjustcodon[&#39;UUC&#39;].astype(float) # dfjustcodon.info() #unable to change these because there are cells with values that aren&#39;t floats . dfjustcodon.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 13028 entries, 0 to 13027 Data columns (total 64 columns): # Column Non-Null Count Dtype -- -- 0 UUU 13028 non-null object 1 UUC 13028 non-null object 2 UUA 13028 non-null float64 3 UUG 13028 non-null float64 4 CUU 13028 non-null float64 5 CUC 13028 non-null float64 6 CUA 13028 non-null float64 7 CUG 13028 non-null float64 8 AUU 13028 non-null float64 9 AUC 13028 non-null float64 10 AUA 13028 non-null float64 11 AUG 13028 non-null float64 12 GUU 13028 non-null float64 13 GUC 13028 non-null float64 14 GUA 13028 non-null float64 15 GUG 13028 non-null float64 16 GCU 13028 non-null float64 17 GCC 13028 non-null float64 18 GCA 13028 non-null float64 19 GCG 13028 non-null float64 20 CCU 13028 non-null float64 21 CCC 13028 non-null float64 22 CCA 13028 non-null float64 23 CCG 13028 non-null float64 24 UGG 13028 non-null float64 25 GGU 13028 non-null float64 26 GGC 13028 non-null float64 27 GGA 13028 non-null float64 28 GGG 13028 non-null float64 29 UCU 13028 non-null float64 30 UCC 13028 non-null float64 31 UCA 13028 non-null float64 32 UCG 13028 non-null float64 33 AGU 13028 non-null float64 34 AGC 13028 non-null float64 35 ACU 13028 non-null float64 36 ACC 13028 non-null float64 37 ACA 13028 non-null float64 38 ACG 13028 non-null float64 39 UAU 13028 non-null float64 40 UAC 13028 non-null float64 41 CAA 13028 non-null float64 42 CAG 13028 non-null float64 43 AAU 13028 non-null float64 44 AAC 13028 non-null float64 45 UGU 13028 non-null float64 46 UGC 13028 non-null float64 47 CAU 13028 non-null float64 48 CAC 13028 non-null float64 49 AAA 13028 non-null float64 50 AAG 13028 non-null float64 51 CGU 13028 non-null float64 52 CGC 13028 non-null float64 53 CGA 13028 non-null float64 54 CGG 13028 non-null float64 55 AGA 13028 non-null float64 56 AGG 13028 non-null float64 57 GAU 13028 non-null float64 58 GAC 13028 non-null float64 59 GAA 13028 non-null float64 60 GAG 13028 non-null float64 61 UAA 13028 non-null float64 62 UAG 13028 non-null float64 63 UGA 13028 non-null float64 dtypes: float64(62), object(2) memory usage: 6.4+ MB . . . # try isinstance(i, float) . for i in col: if df[col].map(type) != float: print(i) . NameError Traceback (most recent call last) &lt;ipython-input-54-13d2a4b8bc49&gt; in &lt;module&gt; -&gt; 1 for i in col: 2 if df[col].map(type) != float: 3 print(i) NameError: name &#39;col&#39; is not defined .",
            "url": "https://pyjasmine.github.io/codon/2020/07/01/Capstone.html",
            "relUrl": "/2020/07/01/Capstone.html",
            "date": " • Jul 1, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://pyjasmine.github.io/codon/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://pyjasmine.github.io/codon/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://pyjasmine.github.io/codon/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://pyjasmine.github.io/codon/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}